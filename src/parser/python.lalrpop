use std::str::FromStr;
use parser::ast;


grammar;

pub Program: ast::Program = {
  <s:Statement> => ast::Program { statements: vec![s] },
};

Statement: ast::Statement = {
  <e:Expression> => ast::Statement::Expression { expression: e },
  "break" => ast::Statement::Break,
  "continue" => ast::Statement::Continue,
};


Expression: ast::Expression = {
  <f:Expression>  "(" <a:Expression> ")" => ast::Expression::Call { f: Box::new(f), args: vec![a] },
  <s:String> => ast::Expression::String { value: s },
  <n:Number> => ast::Expression::Number { value: n },
  <i:Identifier> => ast::Expression::Identifier { name: i },
  "(" <e:Expression> ")" => e,
};

Number: i32 = <s:r"[0-9]+"> => i32::from_str(s).unwrap();

String: String = <s:r"'[^']+'"> => String::from(s);
Identifier: String = <s:r"[a-z]+"> => String::from(s);
